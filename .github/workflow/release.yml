name: Maven Java Release with Test Coverage Control

on:
  push:
    #branches:
    #  - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Check and Generate Release
    runs-on: ubuntu-latest
    permissions:
        contents: read
        issues: read
        checks: write
        pull-requests: write
    steps:
      - name: Checkout Source Code from Github
        uses: actions/checkout@v3
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          
      - name: Install Doxygen
        run: sudo apt-get install doxygen -y
        shell: bash
        
      - name: Generate Documentation
        run: doxygen Doxyfile
        working-directory: ./calculator-app
        shell: bash
        
      #- name: Build and run tests
      #  run: mvn clean test

      #- name: Generate JaCoCo XML report
      #  run: mvn jacoco:report

      - name: Build and run tests
        # run: mvn clean test
        run: mvn package
        working-directory: ./calculator-app

      - name: Generate JaCoCo XML report
        run: mvn jacoco:report
        working-directory: ./calculator-app
        
      - name: Check Test Coverage
        run: |
          # Parse the JaCoCo XML report and check coverage percentage
          covered=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@covered)" coveragereport/jacoco.xml)
          missed=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@missed)" coveragereport/jacoco.xml)
          total=$((covered + missed))
          coverage_percentage=$(awk "BEGIN { print ($covered / $total) * 100 }")
          # Check if coverage is 100%
          if (( $(echo "$coverage_percentage == 100" | bc -l) )); then
            echo "Test coverage is 100%!"
          else
            echo "Test coverage is not 100%."
            exit 1  # Fail the GitHub Actions workflow
          fi
          echo "Coverage Percentage: $coverage_percentage"
          echo "Covered: $covered"
          echo "Missed: $missed"
        working-directory: ./calculator-app

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: reportgenerator "-reports:**/jacoco.xml" "-sourcedirs:src/main/java" "-targetdir:target/site/coveragereport" "-reporttypes:Html"
        working-directory: ./calculator-app

      - name: Archive Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coveragereport
          
      - name: Get Commit Summary
        id: commit_summary
        run: echo "::set-output name=summary::$(git log --format=%B -n 10 ${{ github.sha }})"

      - name: Create Release
        id: create_common_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MAVEN_TEMPLATE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this release:
            ${{ steps.commit_summary.outputs.summary }}
            
            Asst. Prof. Dr. Ugur CORUH
          draft: false
          prerelease: false
        
      - name: Compress Linux binaries
        run: tar -czvf binaries.tar.gz -C publish/linux .
        working-directory: ./calculator-app
        
      - name: Compress Test Coverage Report
        run: tar -czvf application-test-report.tar.gz -C coveragereport .
        working-directory: ./calculator-app
        
      - name: Compress Test Coverage Report
        run: tar -czvf application-test-report.tar.gz -C coveragereport .
        working-directory: ./calculator-app
        
      - name: Upload Linux release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_common_release.outputs.upload_url }}
          asset_path: ./linux-binaries.tar.gz
          asset_name: linux-binaries.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}
          
      # https://github.com/peaceiris/actions-gh-pages
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.NET_CORE_TEMPLATE_TOKEN }}
          publish_dir: ./docs/html